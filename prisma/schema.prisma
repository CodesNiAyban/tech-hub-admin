// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Course {
  id     String @id @default(uuid())
  userId String

  code        String  @unique @db.Text
  title       String  @unique @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categories  Category[]
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  enrollee    Enrollees[]
  ratings     Rating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Rating {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  rating Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id           String            @id @default(uuid())
  title        String
  description  String?           @db.Text
  videoUrl     String?           @db.Text
  position     Int
  isPublished  Boolean           @default(false)
  subscription SubscriptionType? @default(null)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  comments     Comments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Comments {
  id        String  @id @default(uuid())
  userId    String
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  comment  String?    @db.Text
  parentId String? // Reference to parent comment for replies
  parent   Comments?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comments[] @relation("CommentReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId, id])
  @@index([chapterId])
  @@index([parentId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id        String  @id @default(uuid())
  userId    String
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Enrollees {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String  @id @default(uuid())
  userId           String  @unique
  stripeCustomerId String? @unique

  status       subscriptionStatus @default(INACTIVE)
  subscription SubscriptionType?  @default(null)
  package      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubscriptionPrices {
  id              String            @id @default(uuid())
  name            String
  subscription    SubscriptionType
  price           Float?
  description     String
  recurring       RecurringInterval
  currency        String
  stripePriceId   String // Add this field to store Stripe price ID
  stripeProductId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum subscriptionStatus {
  INACTIVE
  ACTIVE
  CANCELLED
}

enum SubscriptionType {
  null
  BASIC
  PRO
  LIFETIME
}

enum RecurringInterval {
  month
  one_time
}
